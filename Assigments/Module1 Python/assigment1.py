# -*- coding: utf-8 -*-
"""Assigment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12T1Q9V858aX34_7MAjwyvyYhdqlFoUPC
"""

## MODULE1

#1. Function to calculate the sum of first n positive integers
def sum_of_first_five_positives(list1):
    result = 0
    count = 0  # Track number of positive number
    for i in list1:
        if i > 0:
            result += i
            count += 1
            if count == 5:  # Stop after summing 5 positive numbers
                break
    return result

# Test
test = [1, 5, 10, -15, -11, -15, 11, 21, 1]
ans = sum_of_first_five_positives(test)
print(ans)

#2. Function to count occurrences of a substring in a string
def count_substring_occurrences(text, substring):
    count = 0
    sub_len = len(substring)

    for i in range(len(text) - sub_len + 1):
        if text[i:i + sub_len] == substring:
            count += 1

    return count

# Test
text = "I eat an apple every day because an apple keeps me healthy."# The taste of an apple is sweet and sometimes an apple can be a bit sour. I love apple juice, apple pie, and apple jam. There are so many varieties of apple, and each apple has a unique flavor. An apple a day keeps the doctor away, so I always make sure to have an apple."
substring = "apple"
count = count_substring_occurrences(text, substring)
print(f"The substring '{substring}' appears {count} times in the text.")

#3. Write a Python program to count the occurrences of each word in a given sentence.
from collections import Counter

def count_word_occurrences(sentence):
    words = sentence.split()  # Split sentence into words
    word_counts = Counter(words)  # Count occurrences of each word
    return word_counts

# Test
sentence = "hello world hello everyone in the world"
word_counts = count_word_occurrences(sentence)
for word, count in word_counts.items():
    print(f"'{word}': {count}")

#4. Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string
# dount
def swap_first_two_and_combine(str1, str2):
    if len(str1) < 2 or len(str2) < 2:
        return "Both strings must have at least two characters."

    swapped_str1 = str2[:2] + str1[2:]  # Swap first two characters with str2
    swapped_str2 = str1[:2] + str2[2:]  # Swap first two characters with str1

    return swapped_str1 + " " + swapped_str2  # Combine with a space

# Test
str1 = "programmingisfun"
str2 = "hellotherebuddy"
result = swap_first_two_and_combine(str1, str2)
print(result)

#5. Write a Python program to add 'ing' at the end of a given string (length should be at least 3).
#If the given string already ends with 'ing' then add 'ly' instead If the string length of the given
#string is less than 3, leave it unchanged
def add_ing_or_ly(word):
    if len(word) < 3:
        return word #unchanged
    elif word.endswith("ing"):
        return word + "ly"  # If it already ends with "ing", add "ly"
    else:
        return word + "ing"  # Otherwise, add "ing"

# Test
print(add_ing_or_ly("run"))
print(add_ing_or_ly("playing"))
print(add_ing_or_ly("go"))

#6. Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if
#'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'.
#Return the resulting string
#doubts
def replace_not_poor(sentence):
    not_index = sentence.find("not")
    poor_index = sentence.find("poor")

    # Check if 'not' appears before 'poor'
    if not_index != -1 and poor_index != -1 and not_index < poor_index:
        sentence = sentence[:not_index] + "good" + sentence[poor_index + 4:]  # Replace 'not...poor' with 'good'

    return sentence

# Test
print(replace_not_poor("This movie is not that poor."))  # Output: "This movie is good."
print(replace_not_poor("The food is not very poor!"))    # Output: "The food is good!"
print(replace_not_poor("The weather is poor, not bad."))

#7. Program to find Greatest Common Divisor of two numbers
import math

def find_gcd(a, b):
    return math.gcd(a, b)

# Test
print(find_gcd(20, 28))
print(find_gcd(98, 56))

#8. Write a Python program to check whether a list contains a sublist.
def contains_sublist(lst, sublst):
    n, m = len(lst), len(sublst)

    for i in range(n - m + 1):  # Iterate through the main list
        if lst[i:i + m] == sublst:  # Check if slice matches sublist
            return True
    return False

# Test
main_list = [1, 2, 3, 4, 5, 6]
sub_list = [3, 4, 5]

print(contains_sublist(main_list, sub_list))

sub_list2 = [4, 6]
print(contains_sublist(main_list, sub_list2))

#9. Write a Python program to find the second smallest number in a list.
def second_smallest(lst):
    unique_lst = sorted(set(lst))  # Remove duplicates and sort
    return unique_lst[1] if len(unique_lst) > 1 else "No second smallest element."

# Test
numbers = [5, 2, 8, 3, 1, 4, 1, 2]
print(second_smallest(numbers))  # Output: 2

#10. Write a Python program to get unique values from a list.
def unique_values(lst):
    return list(set(lst))  # Convert list to set (removes duplicates) and back to list

# Test
my_list = [1, 2, 2, 3, 4, 4, 5, 6, 6, 6]
unique_values = unique_values(my_list)
print(unique_values)  # Output: [1, 2, 3, 4, 5, 6] (Order may vary)

#11. Write a Python program to unzip a list of tuples into individual lists.
def unzip_tuples(tuples_list):
    return list(zip(*tuples_list))  # Unzips the tuples into separate lists

# Example usage
tuples = [(1, 'a'), (2, 'b'), (3, 'c')]
unzipped = unzip_tuples(tuples)

# Convert tuples to lists (optional)
unzipped_lists = [list(item) for item in unzipped]

print(unzipped_lists)  # Output: [[1, 2, 3], ['a', 'b', 'c']]

#12. Write a Python program to convert a list of tuples into a dictionary
def convert_to_dict(tuples_list):
    return dict(tuples_list)  # Convert list of tuples into a dictionary

# Example usage
tuples = [(1, 'one'), (2, 'two'), (3, 'three')]
dictionary = convert_to_dict(tuples)

print(dictionary)  # Output: {1: 'one', 2: 'two', 3: 'three'}

#13. Write a Python program to sort a dictionary (ascending /descending) by value
def sort_dict_by_value(d, ascending=True):
    return dict(sorted(d.items(), key=lambda item: item[1], reverse=not ascending))

# Example usage
my_dict = {'apple': 5, 'banana': 2, 'cherry': 8, 'date': 3}

# Sorting in ascending order
asc_sorted = sort_dict_by_value(my_dict, ascending=True)
print("Ascending:", asc_sorted)

# Sorting in descending order
desc_sorted = sort_dict_by_value(my_dict, ascending=False)
print("Descending:", desc_sorted)

#14. Write a Python program to find the highest 3 values in a dictionary.
def top_three_values(d):
    return dict(sorted(d.items(), key=lambda item: item[1], reverse=True)[:3])

# Example usage
my_dict = {'apple': 5, 'banana': 2, 'cherry': 8, 'date': 3, 'elderberry': 10, 'fig': 7}

# Get the top 3 highest values
top_3 = top_three_values(my_dict)
print("Top 3 highest values:", top_3)

#15
def fibonacci_series(n):
    fib_list = [0, 1]  # Starting the series with 0 and 1
    for _ in range(n - 2):  # Generate remaining numbers
        fib_list.append(fib_list[-1] + fib_list[-2])
    return fib_list[:n]  # Return only the first n numbers

# Example usage
n = 7
fib_numbers = fibonacci_series(n)
print("First few Fibonacci numbers are:", ", ".join(map(str, fib_numbers)))

#16
def count_frequencies(lst):
    freq_dict = {}
    for num in lst:
        freq_dict[num] = freq_dict.get(num, 0) + 1
    return freq_dict

# Example usage
lst = [1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]
freq_dict = count_frequencies(lst)

# Formatting output
output = ", ".join(f"{key} : {value}" for key, value in sorted(freq_dict.items()))
print(output)

#17
import math

def sum_odd_series(n):
    sum_odd = 0
    for i in range(1, n+1, 2):  # Only odd numbers
        sum_odd += (i**2) / math.factorial(i)
    return sum_odd

def sum_even_series(n):
    sum_even = 0
    for i in range(2, n+1, 2):  # Only even numbers
        sum_even += (i**2) / math.factorial(i)
    return sum_even

# Example usage
n = 6  # You can change n as needed
odd_sum = sum_odd_series(n)
even_sum = sum_even_series(n)

print(f"Sum of Odd Series: {odd_sum:.5f}")
print(f"Sum of Even Series: {even_sum:.5f}")

#18. Python Program to Find Factorial of Number Using Recursion
def factorial(n):
    if n == 0 or n == 1:
        return 1  # Base case: factorial of 0 or 1 is 1
    else:
        return n * factorial(n - 1)  # Recursive case

# Example usage
num = int(input("Enter a number: "))
result = factorial(num)
print(f"Factorial of {num} is {result}")

#19.
def unique_elements(lst):
    return list(set(lst))  # Convert list to set to remove duplicates, then back to list

# Example usage
my_list = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8]
unique_list = unique_elements(my_list)

print("Original List:", my_list)
print("Unique Elements List:", unique_list)

#20
import random
import string

class User:
    def __init__(self, user_id, name, password):
        self.user_id = user_id
        self.name = name
        self.password = password

    def get_details(self):
        return (self.user_id, self.name, self.password)

def generate_password(user_input):
    try:
        words = user_input.split()
        if not words:
            raise ValueError("Input cannot be empty. Please provide some words.")

        password = random.choice(words).capitalize()  # Capitalize one word
        password += str(random.randint(10, 99))  # Add a random number
        password += random.choice(string.punctuation)  # Add a special character

        while len(password) < 8:  # Ensure password length is at least 8
            password += random.choice(string.ascii_letters + string.digits + string.punctuation)

        return password
    except Exception as e:
        print(f"Error: {e}")
        return None

# Example usage
try:
    user_id = input("Enter User ID: ")
    name = input("Enter Name: ")
    user_input = input("Enter some words for password generation: ")

    password = generate_password(user_input)

    if password:
        user = User(user_id, name, password)
        print("\nUser Details:")
        print("User ID:", user.user_id)
        print("Name:", user.name)
        print("Generated Password:", user.password)
except Exception as e:
    print(f"Unexpected error: {e}")

## MODULE4

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('car_price_prediction.csv')
df.isnull().sum()

print("/nCheck Duplication")
df.duplicated().sum()
print("/nCheck datatype")
df.dtypes
print("/nCheck the number of unique values of each column")
df.nunique()
#Check statistics of data set
df.describe()

df.columns

# Distribution of Numerical Features
numerical_features = ['Prod. year','Leather interior', 'Fuel type', 'Engine volume', 'Mileage',
       'Cylinders', 'Gear box type', 'Drive wheels', 'Doors', 'Wheel', 'Color',
       'Airbags', 'Price']

plt.figure(figsize=(12, 8))
for feature in numerical_features:
    plt.subplot(3, 5, numerical_features.index(feature) + 1)
    sns.histplot(data=df[feature], bins=20, kde=True)
    plt.title(feature)
plt.tight_layout()
plt.show()

# Price Analysis
plt.figure(figsize=(8, 6))
sns.histplot(data=df['Price'], bins=20, kde=True)
plt.title('Distribution of Price')
plt.show()

# Define the list of categorical columns to analyze
categorical_columns = ['fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel',
                       'enginelocation', 'enginetype', 'cylindernumber', 'fuelsystem']

# Create subplots
fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 9))
axes = axes.ravel()  # Flatten the 2D array of axes

# Loop through each categorical column
for i, column in enumerate(categorical_columns):
    sns.countplot(x=df[column], data=df, palette='bright', ax=axes[i], saturation=0.95)
    for container in axes[i].containers:
        axes[i].bar_label(container, color='black', size=10)
    axes[i].set_title(f'Count Plot of {column.capitalize()}')
    axes[i].set_xlabel(column.capitalize())
    axes[i].set_ylabel('Count')

# Adjust layout and show plots
plt.tight_layout()
plt.show()

# Categorical Feature vs. Price
plt.figure(figsize=(12, 8))
for feature in categorical_columns:
    plt.subplot(3, 3, categorical_columns.index(feature) + 1)
    sns.boxplot(data=df, x=feature, y='price')
    plt.title(f'{feature} vs. Price')
plt.tight_layout()
plt.show()

n = 20  # Number of top car models to plot
top_car_models = df['CarName'].value_counts().head(n)

plt.figure(figsize=(10, 6))
sns.barplot(x=top_car_models.values, y=top_car_models.index)
plt.title(f'Top {n} Car Models by Frequency')
plt.xlabel('Frequency')
plt.ylabel('Car Model')
plt.tight_layout()
plt.show()b=

# Correlation Analysis
correlation_matrix = df[numerical_features].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Extract brand and model from CarName
df['brand'] = df['CarName'].apply(lambda x: x.split(' ')[0])
df['model'] = df['CarName'].apply(lambda x: ' '.join(x.split(' ')[1:]))

# Define categorical and numerical columns
categorical_columns = ['fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel',
                       'enginelocation', 'enginetype', 'cylindernumber', 'fuelsystem', 'brand', 'model']
numerical_columns = ['wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight',
                     'enginesize', 'boreratio', 'stroke', 'compressionratio', 'horsepower',
                     'peakrpm', 'citympg', 'highwaympg']

# Encoding categorical variables
label_encoder = LabelEncoder()
for column in categorical_columns:
    df[column] = label_encoder.fit_transform(df[column])

# Feature engineering
df['power_to_weight_ratio'] = df['horsepower'] / df['curbweight']
for column in numerical_columns:
    df[f'{column}_squared'] = df[column] ** 2
df['log_enginesize'] = np.log(df['enginesize'] + 1)

# Feature scaling
scaler = StandardScaler()
df[numerical_columns] = scaler.fit_transform(df[numerical_columns])