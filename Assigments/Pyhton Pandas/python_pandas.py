# -*- coding: utf-8 -*-
"""Python Pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nRcX-EnkQcEWPFeQ87WLykWufaYliHIq
"""

# Function to check the number type
def check_number(num):
    if num > 0:
        return "The number is Positive."
    elif num < 0:
        return "The number is Negative."
    else:
        return "The number is Zero."

# Taking user input
num = -10
result = check_number(num)

# Displaying the result
print(result)

#repert # Function to calculate factorial
def factorial(n):
    if n < 0:
        return "Factorial is not defined for negative numbers."
    elif n == 0 or n == 1:
        return 1  # Base case: Factorial of 0 and 1 is 1
    else:
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result

# Taking user input
num = 5
print(f"Factorial of {num} is {factorial(num)}")

#repert
def fibonacci_series(n):
    fib_list = [0, 1]  # Starting the series with 0 and 1
    for _ in range(n - 2):  # Generate remaining numbers
        fib_list.append(fib_list[-1] + fib_list[-2])
    return fib_list[:n]  # Return only the first n numbers

# Example usage
n = 7
fib_numbers = fibonacci_series(n)
print("First few Fibonacci numbers are:", ", ".join(map(str, fib_numbers)))

#pandas

import pandas as pd
import numpy as np

#1 & 2
colors = pd.Series(["Red", "Blue", "Green"])
print(colors)

#3
car_types = pd.Series(["Sedan", "SUV", "Truck"])
print(car_types)

#4
car_data = pd.DataFrame({"Car Type": car_types, "Color": colors})
print(car_data)

#5
print(car_data.dtypes)

#6
print(car_data.describe())

#7
print(car_data.info())

#8
numbers = pd.Series([10, 20, 30, 40, 50])
print("Mean:", numbers.mean())

#9
print("Sum:", numbers.sum())

#10
print(car_data.columns)

#11
print("Length of DataFrame:", len(car_data))

#12
print(car_data.head(5))

#13
print(car_data.head(7))

#14
print(car_data.tail(5))

#15
car_data_expanded = pd.DataFrame({
    "Car Type": ["Sedan", "SUV", "Truck", "Hatchback", "Convertible"],
    "Color": ["Red", "Blue", "Green", "Black", "White"]
})

print(car_data_expanded.loc[3])

#16
print(car_data_expanded.iloc[3])

#17
car_sales = pd.DataFrame({
    "Make": ["Toyota", "Honda", "Ford", "Toyota", "Honda", "Ford"],
    "Doors": [4, 2, 4, 2, 4, 2]
})

# Crosstab to count occurrences of Make vs. Doors
crosstab_result = pd.crosstab(car_sales["Make"], car_sales["Doors"])
print(crosstab_result)

#chart

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
#import folium
#from folium.plugins import MarkerCluster
#from wordcloud import WordCloud
#import squarify  # For tree maps

df = pd.read_csv("U.S.Death.csv")  # Replace with actual filename
df.head()

df['date'] = pd.to_datetime(df['date'], errors='coerce', dayfirst=False)

# Extract year
df['year'] = df['date'].dt.year
df

plt.figure(figsize=(12, 6))
df_yearly = df.groupby("year")["officer_name"].count().reset_index()

sns.barplot(x=df_yearly["year"], y=df_yearly["officer_name"], palette="Blues")
plt.xticks(rotation=45)
plt.xlabel("Year")
plt.ylabel("Total Deaths")
plt.title("Total Police Deaths per Year (1984-2016)")
plt.show()

plt.figure(figsize=(12, 6))
df_yearly = df.groupby("year")["officer_name"].count().reset_index()

sns.barplot(x=df_yearly["year"], y=df_yearly["officer_name"], palette="Blues")
plt.xticks(rotation=45)
plt.xlabel("Year")
plt.ylabel("Total Deaths")
plt.title("Total Police Deaths per Year (1984-2016)")
plt.show()

import geopandas as gpd

us_map = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
df_states_deaths = df.groupby("state")["officer_name"].count().reset_index()

# Merge dataset with US states geometries
us_map = us_map[us_map["iso_a3"] == "USA"].merge(df_states_deaths, left_on="name", right_on="state", how="left")

# Plot
fig, ax = plt.subplots(1, 1, figsize=(15, 8))
us_map.plot(column="officer_name", cmap="Reds", linewidth=0.8, edgecolor="black", legend=True, ax=ax)
plt.title("Heatmap of Police Deaths in US (1984-2016)")
plt.show()

fig = px.choropleth(df,
                    locations="state",
                    locationmode="USA-states",
                    color="officer_name",
                    scope="usa",
                    title="Choropleth of Police Deaths in US States")

fig.show()

text = " ".join(df["cause_of_death"].str.replace("Cause of Death:", "").dropna())

wordcloud = WordCloud(width=1000, height=500, background_color="black").generate(text)

plt.figure(figsize=(12, 6))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.title("Word Cloud of Causes of Death")
plt.show()

california_data = df[df["state"] == "California"]
map_ca = folium.Map(location=[37.5, -119.5], zoom_start=6)
marker_cluster = MarkerCluster().add_to(map_ca)

for _, row in california_data.iterrows():
    folium.Marker(
        location=[row["latitude"], row["longitude"]],
        popup=row["officer_name"]
    ).add_to(marker_cluster)

map_ca  # Display the map

import plotly.express as px

df_animated = df.groupby(["year", "cause_of_death"])["officer_name"].count().reset_index()
fig = px.bar(df_animated, x="cause_of_death", y="officer_name", animation_frame="year", color="cause_of_death",
             title="Yearly Police Deaths by Cause", labels={"officer_name": "Deaths", "cause_of_death": "Cause"})
fig.show()

